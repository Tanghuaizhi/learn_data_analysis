geom_histogram(aes(color = cut)) +
facet_wrap( ~ color) +
scale_x_log10() +
scale_fill_brewer(palette = "Set1")
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(aes(color = cut)) +
facet_wrap( ~ color) +
scale_x_log10() +
scale_fill_brewer()
ggplot(data = diamonds, aes(x = price)) +
geom_histogram() +
facet_wrap( ~ color) +
scale_x_log10() +
scale_fill_brewer()
ggplot(data = diamonds, aes(x = price)) +
geom_histogram() +
facet_wrap( ~ color) +
scale_x_log10() +
scale_fill_brewer(type = 'qual')
ggplot(data = diamonds, aes(x = price)) +
geom_histogram() +
facet_wrap( ~ color) +
scale_x_log10() +
scale_fill_brewer(type = 'seq')
ggplot(data = diamonds, aes(x = price)) +
geom_histogram() +
facet_wrap( ~ color) +
scale_x_log10() +
scale_fill_brewer(type = 'qual', palette = 1)
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(color = cut) +
facet_wrap( ~ color) +
scale_x_log10() +
scale_fill_brewer(type = 'qual', palette = 1)
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(aes(color = cut)) +
facet_wrap( ~ color) +
scale_x_log10() +
scale_fill_brewer(type = 'qual', palette = 1)
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(aes(fill = cut)) +
facet_wrap( ~ color) +
scale_x_log10() +
scale_fill_brewer(type = 'qual', palette = 1)
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(aes(fill = cut)) +
facet_wrap( ~ color) +
scale_x_log10() +
scale_fill_brewer(type = 'qual')
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(aes(fill = cut)) +
facet_wrap( ~ color) +
scale_x_log10()
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(aes(fill = cut)) +
facet_wrap( ~ color) +
scale_x_log10() +
scale_fill_brewer(type = 'qual')
ggplot(data = diamonds, aes(x = price, y = table)) +
geom_point()) +
ggplot(data = diamonds, aes(x = price, y = table)) +
geom_point() +
scale_fill_brewer(type = 'qual')
ggplot(data = diamonds, aes(x = table, y = price)) +
geom_point() +
scale_fill_brewer(type = 'qual')
ggplot(data = diamonds, aes(x = table, y = price)) +
geom_point(aes(color = cut)) +
scale_fill_brewer(type = 'qual')
ggplot(data = diamonds, aes(x = table, y = price)) +
geom_point(aes(color = cut)) +
scale_color_brewer(type = 'qual')
ggplot(data = diamonds, aes(x = table, y = price)) +
geom_point(aes(color = cut)) +
xlim(50, 80) +
scale_color_brewer(type = 'qual')
ggplot(data = diamonds, aes(x = table, y = price)) +
geom_point(aes(color = cut)) +
scale_x_continuous(breaks = c(50,80,2)) +
scale_color_brewer(type = 'qual')
ggplot(data = diamonds, aes(x = table, y = price)) +
geom_point(aes(color = cut)) +
scale_x_continuous(breaks = seq(50,80,2)) +
scale_color_brewer(type = 'qual')
ggplot(data = diamonds, aes(x = table, y = price)) +
geom_point(aes(color = cut)) +
scale_x_continuous(breaks = seq(50,80,2), limits = (50, 80)) +
ggplot(data = diamonds, aes(x = table, y = price)) +
geom_point(aes(color = cut)) +
scale_x_continuous(breaks = seq(50,80,2), limits = c(50,80)) +
scale_color_brewer(type = 'qual')
ggplot(data = diamonds, aes(x = table, y = price)) +
geom_point(aes(color = cut), alpha = 1/10) +
scale_x_continuous(breaks = seq(50,80,2), limits = c(50,80)) +
scale_color_brewer(type = 'qual')
ggplot(data = diamonds, aes(x = table, y = price)) +
geom_point(aes(color = cut), alpha = 1/5) +
scale_x_continuous(breaks = seq(50,80,2), limits = c(50,80)) +
scale_color_brewer(type = 'qual')
data <- transform(data, volume = x * y * z)
diamonds <- transform(diamonds, volume = x * y * z)
ggplot(data = diamonds, aes(x = volume, y = price)) +
geom_point()
ggplot(data = diamonds, aes(x = volume, y = price)) +
geom_point() +
scale_x_continuous(limits = c(0, 350))
ggplot(data = diamonds, aes(x = volume, y = price)) +
geom_point() +
scale_x_continuous(limits = c(0, 350)) +
scale_y_log10()
ggplot(data = subset(diamonds, !is.na(volume)) aes(x = volume, y = price)) +
ggplot(data = subset(diamonds, !is.na(volume)), aes(x = volume, y = price)) +
geom_point() +
scale_x_continuous(limits = c(0, 350)) +
scale_y_log10()
ggplot(data = subset(diamonds, volume > 0), aes(x = volume, y = price)) +
geom_point() +
scale_x_continuous(limits = c(0, 350)) +
scale_y_log10()
geom_point(aes(color = clarity) +
ggplot(data = subset(diamonds, volume > 0), aes(x = volume, y = price)) +
geom_point(aes(color = clarity)) +
scale_x_continuous(limits = c(0, 350)) +
scale_y_log10()
ggplot(data = subset(diamonds, volume > 0), aes(x = volume, y = price)) +
ggplot(data = subset(diamonds, volume > 0), aes(x = volume, y = price)) +
geom_point(aes(color = clarity)) +
scale_x_continuous(limits = c(0, 350))
ggplot(data = subset(diamonds, volume > 0), aes(x = volume, y = price)) +
geom_point(aes(color = clarity)) +
scale_x_continuous(limits = c(0, 350)) +
scale_y_log10()
ggplot(data = subset(diamonds, volume > 0), aes(x = volume, y = price)) +
geom_point(aes(color = clarity)) +
scale_x_continuous(limits = c(0, 350)) +
scale_y_log10() +
scale_color_brewer(type = 'div')
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
names(pf)
pf <- transform(pf, prop_initiated = friendships_initiated / friend_count)
names(pf)
ggplot(data = pf, aes(x = prop_initiated)) +
geom_hist()
ggplot(data = pf, aes(x = prop_initiated)) +
geom_histogram()
pf$year_joined.bucket <- cut(pf$year_joined, breaks = c(2004,2009, 2011, 2012, 2014))
pf$year_joined <- 2014 - ceiling(pf$tenure/365)
pf$year_joined.bucket <- cut(pf$year_joined, breaks = c(2004,2009, 2011, 2012, 2014))
ggplot(data = pf, aes(x = prop_initiated, y = tenure)) +
geom_line(color = year_joined.bucket)
ggplot(data = pf, aes(x = prop_initiated, y = tenure)) +
geom_line(aes(color = year_joined.bucket))
ggplot(data = pf, aes(x = tenure, y = prop_initiated)) +
geom_line(aes(color = year_joined.bucket))
ggplot(data = pf, aes(x = tenure, y = prop_initiated)) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)
ggplot(data = pf, aes(x = tenure, y = prop_initiated)) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median) +
smooth()
ggplot(data = pf, aes(x = tenure, y = prop_initiated)) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median) +
geom_smooth()
ggplot(data = pf, aes(x = tenure, y = prop_initiated)) +
geom_smooth(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)
ggplot(data = pf, aes(x = tenure, y = prop_initiated)) +
geom_smooth(aes(color = year_joined.bucket))
ggplot(data = pf, aes(x = tenure, y = prop_initiated)) +
geom_smooth(aes(color = year_joined.bucket), linetype = 2)
summary(pf$prop_initiated)
levels(pf$year_joined.bucket)
summary(subset(pf, pf$year_joined.bucket == '(2012,2014]')$prop_initiated)
diamonds <- transform(diamonds, ratio = price/carat)
trans?form
?transform
ggplot(data = diamonds, aes(x = cut, y = ratio)) +
geom_point(color = color) +
facet_wrap( ~ clarity)
ggplot(data = diamonds, aes(x = cut, y = ratio)) +
geom_point(aes(color = color)) +
facet_wrap( ~ clarity)
ggplot(data = diamonds, aes(x = cut, y = price/carat)) +
geom_point(aes(color = color)) +
facet_wrap( ~ clarity)
ggplot(data = diamonds, aes(x = cut, y = ratio)) +
geom_point(aes(color = color)) +
facet_wrap( ~ clarity)
ggplot(data = diamonds, aes(x = cut, y = ratio)) +
geom_point(aes(color = color)) +
facet_wrap( ~ clarity) +
scale_color_brewer(type = 'div')
ggplot(data = diamonds, aes(x = cut, y = price/carat)) +
geom_jitter(aes(color = color)) +
facet_wrap( ~ clarity) +
scale_color_brewer(type = 'div')
library(ggplot2)
data(diamonds)
getwd()
ggplot(data = diamonds,aes(x = weght, y = price)) +
geom_point()
ggplot(data = diamonds,aes(x = carat, y = price)) +
geom_point()
range(diamonds$carat)
?quantile
range(diamonds$price)
ggplot(data = diamonds,aes(x = carat, y = price)) +
geom_point() +
coord_trans(limx = c(quantile(diamonds$carat, 0.01), 5.01), limy = c(quantile(diamonds$price, 0.01), 18823))
# answer
ggplot(data = diamonds,aes(x = carat, y = price)) +
coord_trans(limx = c(0, quantile(diamonds$carat, 0.99)),
limy = c(0, quantile(diamonds$price, 0.99))) +
geom_point(fill = I('#F79420'), color = I('black'))
# answer
ggplot(data = diamonds,aes(x = carat, y = price)) +
coord_trans(limx = c(0, quantile(diamonds$carat, 0.99)),
limy = c(0, quantile(diamonds$price, 0.99))) +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21)
ggplot(data = diamonds,aes(x = carat, y = price)) +
coord_trans(limx = c(0, quantile(diamonds$carat, 0.99)),
limy = c(0, quantile(diamonds$price, 0.99))) +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21) +
state_smooth(method = 'lm')
ggplot(data = diamonds,aes(x = carat, y = price)) +
coord_trans(limx = c(0, quantile(diamonds$carat, 0.99)),
limy = c(0, quantile(diamonds$price, 0.99))) +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21) +
stat_smooth(method = 'lm')
# install these if necessary
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
#ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
View(diamonds)
?diamonds
library(gridExtra)
plot1 <- ggplot(data = diamonds, aes(x = price)) +
geom_histogram() +
ggtitle('Price')
plot2 <- ggplot(data = diamonds, aes(x = price)) +
geom_histogram() +
scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange()
grid.arrange(plot1, plot2)
#answer
plot1 <- qplot(data = diamonds, x = price, binwidth = 100, fill = I('#099DD9')) +
ggtitle('Price')
plot2 <- qplot(data = diamonds, x = price, binwidth = 100, fill = I('#F79420')) +
scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol =2)
plot2 <- qplot(data = diamonds, x = price, binwidth = 100, fill = I('#F79420')) +
scale_y_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol =2)
plot2 <- qplot(data = diamonds, x = price, binwidth = 100, fill = I('#F79420')) +
scale_x_log10() +
ggtitle('Price (log10)')
plot2 <- qplot(data = diamonds, x = price, binwidth = 0.01, fill = I('#F79420')) +
scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol =2)
qplot(data = diamonds, x = carat, y = price) +
scale_y_continuous(trans = log10_trans()) +
ggtitle('Price (log10) by Carat')
qplot(data = diamonds, x = carat, y = price) +
scale_y_continuous(trans = log10_trans()) +
ggtitle('Price (log10) by Carat')
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
table(diamonds$carat)
head(sort(table(diamonds$carat), decreasing = T))
ggplot(aes(carat, price), data = diamonds) +
geom_jitter(alpha = 1/2, size = 0.75) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# install and load the RColorBrewer package
install.packages('RColorBrewer')
# install and load the RColorBrewer package
install.packages('RColorBrewer')
install.packages("RColorBrewer")
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
library(ggplot2)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
ggplot(aes(carat, price), data = diamonds) +
geom_jitter(alpha = 1/2, size = 0.75) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(color = clarity, alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(aes(color = clarity), alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggtitle('Price (log10) by Cube-Root of Carat and Color’)
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color',
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
args(lm)
summary(m5)
install.package('bitops')
install.package('bitops')
install.packages('RCurl')
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
load("BigDiamonds.rda")
setwd("D:/learn_data_analysis/R basic/lesson6")
load("BigDiamonds.rda")
load("BigDiamonds.rda")
load("BigDiamonds.rda")
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
suppressMessages(library(lattice))
suppressMessages(library(MASS))
suppressMessages(library(memisc))
models <- mtable(m1, m2, m3, m4, m5)
models
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsBig)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
suppressMessages(library(lattice))
suppressMessages(library(MASS))
suppressMessages(library(memisc))
models <- mtable(m1, m2, m3, m4, m5)
models
m1 <- lm(logprice ~ I(carat^(1/3)), data = diamondsBig[diamondsbig$price < 10000 &
diamondsbig$cert == 'GIA'])
diamondsbig$logprice = log(diamondsbig$price)
m1 <- lm(logprice ~ I(carat^(1/3)), data = diamondsBig[diamondsbig$price < 10000 &
diamondsbig$cert == 'GIA'])
m1 <- lm(logprice ~ I(carat^(1/3)), data = diamondsbig[diamondsbig$price < 10000 &
diamondsbig$cert == 'GIA'])
m1 <- lm(logprice ~ I(carat^(1/3)), data = diamondsbig[diamondsbig$price < 10000 &
diamondsbig$cert == 'GIA',])
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
models <- mtable(m1, m2, m3, m4, m5)
models
#Be sure you’ve loaded the library memisc and have m5 saved as an object in your workspace.
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
modelEstimate
exp(modelEstimate)
dat = data.frame(m4$model, m4$residuals)
with(dat, sd(m4.residuals))
with(subset(dat, carat > .9 & carat < 1.1), sd(m4.residuals))
dat$resid <- as.numeric(dat$m4.residuals)
ggplot(aes(y = resid, x = round(carat, 2)), data = dat) +
geom_line(stat = "summary", fun.y = sd)
