getwd()
getwd()
setwd('D:/learn_data_analysis/R basic/lesson3')
library(ggplot2)
qplot(x = log10(friend_count), data = pf)
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
qplot(x = log10(friend_count), data = pf)
ggplot(aes(x = friend_count), data = pf) +
geom_histogram() +
scale_x_log10()
grid.arrange(logScale, countScale, ncol = 2)
countScale <- ggplot(aes(x = friend_count), data = pf) +
geom_histogram() +
scale_x_log10()
grid.arrange(logScale, countScale, ncol = 2)
qplot(x = friend_count, data = subset(pf, !is.na(gender)), binwidth = 10) +
scale_x_continuous(lim = c(0,1000), breaks = seq(0, 1000, 50)) + facet_wrap(~gender)
qplot(x = friend_count, data = subset(pf, !is.na(gender)), binwidth = 10, geom = 'freqpoly') +
scale_x_continuous(lim = c(0,1000), breaks = seq(0, 1000, 50)) + facet_wrap(~gender)
qplot(x = friend_count, data = subset(pf, !is.na(gender)), binwidth = 10, geom = 'freqpoly') +
scale_x_continuous(lim = c(0,1000), breaks = seq(0, 1000, 50))
qplot(x = friend_count, data = subset(pf, !is.na(gender)), binwidth = 10, geom = 'freqpoly', color = 'gender) +
qplot(x = friend_count, data = subset(pf, !is.na(gender)), binwidth = 10, geom = 'freqpoly', color = 'gender') +
qplot(x = friend_count, data = subset(pf, !is.na(gender)), binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous(lim = c(0,1000), breaks = seq(0, 1000, 50))
qplot(x = friend_count, y = ..count../sum(..count..), data = subset(pf, !is.na(gender)), binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous(lim = c(0,1000), breaks = seq(0, 1000, 50))
qplot(x = friend_count, y = ..count../sum(..count..),
data = subset(pf, !is.na(gender)),
xlab = 'Friend Count',
ylab = 'Proportion of Users with that friend count'
binwidth = 10, geom = 'freqpoly', color = gender) +
qplot(x = friend_count, y = ..count../sum(..count..),
data = subset(pf, !is.na(gender)),
xlab = 'Friend Count',
ylab = 'Proportion of Users with that friend count',
binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous(lim = c(0,1000), breaks = seq(0, 1000, 50))
?qplot
qplot(x = friend_count, y = ..count../sum(..count..),
data = subset(pf, !is.na(gender)), xlim = c(400,800),
xlab = 'Friend Count',
ylab = 'Proportion of Users with that friend count',
binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous(lim = c(0,1000), breaks = seq(0, 1000, 50))
xlab = 'Friend Count',
qplot(x = friend_count, y = ..count../sum(..count..),
data = subset(pf, !is.na(gender)),
xlab = 'Friend Count',
ylab = 'Proportion of Users with that friend count',
binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous(lim = c(400,1000), breaks = seq(400, 1000, 50))
qplot(x = friend_count, y = ..count../sum(..count..),
data = subset(pf, !is.na(gender)),
xlab = 'Friend Count',
ylab = 'Proportion of Users with that friend count',
binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous(lim = c(300,600), breaks = seq(300, 600, 50))
qplot(x = www_likes, data = subset(pf, !is.na(gender)), binwidth = 10) +
scale_x_continuous(lim = c(0,1000), breaks = seq(0, 1000, 50)) + facet_wrap(~gender)
qplot(x = www_likes, data = subset(pf, !is.na(gender)), binwidth = 10) +
scale_x_continuous(lim = c(0,500), breaks = seq(0, 500, 50)) + facet_wrap(~gender)
qplot(x = www_likes, y = ..count../sum(..count..),
data = subset(pf, !is.na(gender)), binwidth = 10) +
scale_x_continuous(lim = c(0,500), breaks = seq(0, 500, 50))
qplot(x = www_likes, y = ..count../sum(..count..),
data = subset(pf, !is.na(gender)),
binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous(lim = c(0,500), breaks = seq(0, 500, 50))
qplot(x = www_likes, y = ..count../sum(..count..),
xlab = 'www_likes',
ylab = 'Proportion',
data = subset(pf, !is.na(gender)),
binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous(lim = c(0,500), breaks = seq(0, 500, 50))
qplot(x = www_likes, y = ..count../sum(..count..),
xlab = 'www_likes',
ylab = 'Proportion',
data = subset(pf, !is.na(gender)),
binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous(lim = c(0,300), breaks = seq(0, 300, 50))
qplot(x = www_likes, data = pf)
qplot(x = www_likes, y = ..count../sum(..count..),
xlab = 'www_likes',
ylab = 'Proportion',
data = subset(pf, !is.na(gender)),
binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous(lim = c(0,300), breaks = seq(0, 300, 50)) +
scale_x_log10()
qplot(x = www_likes, y = ..count../sum(..count..),
xlab = 'www_likes',
ylab = 'Proportion',
data = subset(pf, !is.na(gender)),
binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous(lim = c(0,1000), breaks = seq(0, 1000, 50)) +
scale_x_log10()
qplot(x = www_likes, y = ..count../sum(..count..),
xlab = 'www_likes',
ylab = 'Proportion',
data = subset(pf, !is.na(gender)),
binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous() +
scale_x_log10()
qplot(x = www_likes, y = ..count../sum(..count..),
xlab = 'www_likes',
ylab = 'Proportion',
data = subset(pf, !is.na(gender)),
geom = 'freqpoly', color = gender) +
scale_x_continuous(lim = c(0,1000), breaks = seq(0, 1000, 50)) +
scale_x_log10()
qplot(x = www_likes, y = ..count../sum(..count..),
xlab = 'www_likes',
ylab = 'Proportion',
data = subset(pf, !is.na(gender)),
geom = 'freqpoly', color = gender) +
scale_x_continuous() +
scale_x_log10()
?by
by(pf$www_likes, pf$gender, sum)
getwd()
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
library(ggplot2)
qplot(x = friend_count, data = subset(pf, !is.na(gender), geom = 'boxplot')
qplot(x = friend_count, data = subset(pf, !is.na(gender)), geom = 'boxplot')
qplot(x = friend_count, data = subset(pf, !is.na(gender)), geom = 'boxplot')
qplot(x = gender, y = friend_count, data = subset(pf, !is.na(gender)), geom = 'boxplot')
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
scale_x_continuous(lim = c(0,1000), breaks = seq(0, 1000, 50))
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
scale_x_continuous(lim = c(0,1000))
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
scale_y_continuous(lim = c(0,1000))
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot')
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
scale_y_continuous(lim = c(0,1000))
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
coord_cartesian(ylim = c(0,1000))
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
coord_cartesian(ylim = c(0,250))
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
coord_cartesian(ylim = c(0,250))
by(pf$friend_count, pf$gender, sum)
by(pf$friend_count, pf$gender, summary)
qplot(x = gender, y = friend_initiated,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
coord_cartesian(ylim = c(0,1000))
qplot(x = gender, y = friendships_initiated,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
coord_cartesian(ylim = c(0,1000))
qplot(x = gender, y = friendships_initiated,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
coord_cartesian(ylim = c(0,150))
by(pf$friendships_initiated, pf$gender, summary)
names(pf)
summary(pf$mobile_likes)
summary(pf$mobile_likes > 0)
mobil_check_in <- NA
pf$mobile_check_in <- ifelse(pf$mobile_likes > 0, 1, 0)
name(pf)
names(pf)
summary(pf$mobile_check_in)
pf$mobile_check_in <- factor(pf$mobile_check_in)
summary(pf$mobile_check_in)
length(pf$mobile_check_in)
length(pf$mobile_check_in == 1)
length(pf$mobile_check_in > 0)
length(pf$mobile_check_in == 1)
sum(pf$mobile_check_in == 1)
sum(pf$mobile_check_in == 1) / length(pf$mobile_check_in)
getwd()
setwd('D:/learn_data_analysis/R basic/lesson4')
getwd()
dir()
setwd("D:/learn_data_analysis/R basic/lesson3")
knitr::opts_chunk$set(echo = TRUE)
getwd()
dir()
dir()
library(ggplot2)
data("diamonds")
summary(diamonds)
?diamonds
diamonds$color
str(diamonds)
head(diamonds)
qplot(x = price, data = diamonds)
?qplot
qplot(x = price, data = diamonds,
xlab = '价格',
ylab = '数量')
qplot(x = price, data = diamonds,
xlab = 'Price',
ylab = 'Count')
qplot(x = price, data = diamonds, bins=50,
xlab = 'Price',
ylab = 'Count')
summary(diamonds$price)
?count.fields
length(diamonds$price)
length(diamonds$price < 500)
sum(diamonds$price < 500)
sum(diamonds$price < 250)
sum(diamonds$price > 15000)
sum(diamonds$price >= 15000)
?scale_x_continuous
qplot(x = price, data = diamonds,
xlab = 'Price',
ylab = 'Count') +
scale_x_continuous(limits = c(0, 2000), breaks = c(0, 2000, 50))
？coord_cartesian
?
coord_cartesian
qplot(x = price, data = diamonds,
xlab = 'Price',
ylab = 'Count') +
coord_cartesian(limits = c(0, 2000))
qplot(x = price, data = diamonds,
xlab = 'Price',
ylab = 'Count') +
coord_cartesian(xlim = c(0, 2000))
qplot(x = price, data = diamonds, bins = 50,
xlab = 'Price',
ylab = 'Count') +
coord_cartesian(xlim = c(0, 2000))
qplot(x = price, data = diamonds, bins = 20,
xlab = 'Price',
ylab = 'Count') +
coord_cartesian(xlim = c(0, 2000))
qplot(x = price, data = diamonds, bins = 100,
xlab = 'Price',
ylab = 'Count') +
coord_cartesian(xlim = c(0, 2000))
qplot(x = price, data = diamonds, bins = 500,
xlab = 'Price',
ylab = 'Count') +
coord_cartesian(xlim = c(0, 2000))
qplot(x = price, data = diamonds,
xlab = 'Price',
ylab = 'Count') +
coord_cartesian(xlim = c(0, 2000))
qplot(x = price, data = diamonds, binwidth = 50,
xlab = 'Price',
ylab = 'Count') +
coord_cartesian(xlim = c(0, 2000))
qplot(x = price, data = diamonds,
xlab = 'Price',
ylab = 'Count') +
coord_cartesian(xlim = c(0, 2000))
qplot(x = price, data = diamonds,
xlab = 'Price',
ylab = 'Count') +
scale_x_continuous(limits = c(0, 2000), breaks = c(0, 2000, 50))
qplot(x = price, data = diamonds,
xlab = 'Price',
ylab = 'Count') +
coord_cartesian(xlim = c(0, 2000))
qplot(x = price, data = diamonds,
xlab = 'Price',
ylab = 'Count') +
scale_x_continuous(limits = c(0, 2000), breaks = c(0, 2000, 50))
ggsave('priceHistogram.png')
qplot(x = price, data = diamonds,
xlab = 'Price',
ylab = 'Count') +
scale_x_continuous(limits = c(0, 2000), breaks = c(0, 2000, 1))
qplot(x = price, data = diamonds,
xlab = 'Price',
ylab = 'Count') +
scale_x_continuous(limits = c(0, 2000), breaks = c(200, 1000, 10))
qplot(x = price, data = diamonds,
xlab = 'Price',
ylab = 'Count') +
scale_x_continuous(limits = c(200, 1000), breaks = c(200, 1000, 10))
qplot(x = price, data = diamonds, binwidth = 10,
xlab = 'Price',
ylab = 'Count') +
scale_x_continuous(limits = c(200, 1000), breaks = c(200, 1000, 10))
qplot(x = price, data = diamonds, binwidth = 10,
xlab = 'Price',
ylab = 'Count') +
scale_x_continuous(limits = c(200, 1000), breaks = c(200, 1000, 50))
qplot(x = price, data = diamonds, binwidth = 1,
xlab = 'Price',
ylab = 'Count') +
scale_x_continuous(limits = c(200, 1000), breaks = c(200, 1000, 50))
qplot(x = price, data = diamonds, binwidth = 10,
xlab = 'Price',
ylab = 'Count') +
scale_x_continuous(limits = c(200, 1000), breaks = c(200, 1000, 50))
qplot(x = price, data = diamonds, binwidth = 10,
xlab = 'Price',
ylab = 'Count') +
scale_x_continuous(limits = c(400, 800), breaks = c(400, 800, 50))
qplot(x = price, data = diamonds, binwidth = 10,
xlab = 'Price',
ylab = 'Count') +
scale_x_continuous(limits = c(400, 800), breaks = c(400, 800, 100))
names(diamonds)
summary(diamonds$cut)
qplot(x = cut, y = price, data = diamonds)
qplot(x = price, data = diamonds)
??facet_grid
?facet_grid
qplot(x = price, data = diamonds) +
facet_grid(~cut)
median(diamonds$price)
?by
by(diamonds$price, diamonds$cut, median)
by(diamonds$price, diamonds$cut, max)
by(diamonds$price, diamonds$cut, min)
)
by(diamonds$price, diamonds$cut, median)
by(diamonds$price, diamonds$cut, max)
by(diamonds$price, diamonds$cut, min)
by(diamonds$price, diamonds$cut, max)
by(diamonds$price, diamonds$cut, median)
qplot(x = price, data = diamonds) + facet_wrap(~cut)
by(diamonds$price, diamonds$cut, summary)
qplot(x = price, data = diamonds) + facet_wrap(~cut.)
qplot(x = price, data = diamonds) + facet_wrap(.~cut)
qplot(x = price, data = diamonds) + facet_wrap(. ~cut)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
data("diamonds")
getwd()
qplot(x = price, data = diamonds) + facet_wrap(~cut)
by(diamonds$price, diamonds$cut, summary)
qplot(x = price, data = diamonds) + facet_wrap(. ~ cut)
qplot(x = price, data = diamonds) + facet_wrap(cut ~ .)
qplot(x = price, data = diamonds) + facet_grid(cut ~ .)
names(diamonds)
qplot
?qplot
names(diamonds)
qplot(x = price/carat, data = diamonds)
qplot(x = price/carat, data = diamonds) + facet_grid(. ~ diamonds$cut)
qplot(x = price/carat, data = diamonds) +
facet_grid(diamonds$cut ~ .) +
scale_x_log10()
qplot(x = price/carat, data = diamonds) +
facet_grid(cut ~ .) +
scale_x_log10()
qplot(x = price/carat, data = diamonds) +
facet_grid(cut ~ .)
+
scale_x_log10()
qplot(x = price/carat, data = diamonds) +
facet_grid(cut ~ .) +
scale_x_log10()
qplot(x = price, data = diamonds, geom = 'boxplot')
qplot(x = price, y = color, data = diamonds, geom = 'boxplot')
qplot(x = color, y = price, data = diamonds, geom = 'boxplot')
ggsave('color_price_boxplot')
ggsave('color_price_boxplot.png')
getwd()
qplot(x = color, y = price, data = diamonds, geom = 'boxplot')
by(diamonds$price, diamonds$color, summary)
?subset
IQR(subset(diamonds$price, diamonds$price=='D'))
IQR(subset(diamonds$price, diamonds$color=='D'))
IQR(subset(diamonds$price, diamonds$color=='J'))
IQR(subset(diamonds, color=='J')$price)
IQR(subset(diamonds, color=='J')$price)
IQR(subset(diamonds$price, diamonds$color=='D'))
?diamonds
qplot(x = color, y = price/carat, data = diamonds, geom = 'boxplot')
ggsave('color_price_per_carat_boxplot.png')
qplot(x = carat, data = diamonds )
qplot(x = carat, data = diamonds, binwidth = 10)
qplot(x = carat, data = diamonds, binwidth = 30)
qplot(x = carat, data = diamonds, binwidth = 1)
qplot(x = carat, data = diamonds)
qplot(x = carat, data = diamonds, geom = 'freqpoly')
qplot(x = carat, data = diamonds, geom = 'freqpoly', color = cut)
qplot(x = carat, data = diamonds, geom = 'freqpoly', binwidth = 0.5)
qplot(x = carat, data = diamonds, geom = 'freqpoly', binwidth = 0.1)
qplot(x = carat, data = diamonds, geom = 'freqpoly', binwidth = 0.5)
qplot(x = carat, data = diamonds, geom = 'freqpoly', binwidth = 0.2)
qplot(x = carat, data = diamonds, geom = 'freqpoly', binwidth = 0.1)
qplot(x = carat, data = diamonds, geom = 'freqpoly', binwidth = 0.05)
qplot(x = carat, data = diamonds, geom = 'freqpoly', binwidth = 0.1)
qplot(x = carat, data = diamonds, geom = 'freqpoly', binwidth = 0.05)
read.csv('indicator age of marriage.csv')
df <- read.csv('indicator age of marriage.csv')
str(df)
View(df)
View(df)
df <- read.csv('indicator age of marriage.csv', header = T)
View(df)
str(df)
df <- read.csv('indicator age of marriage.csv', header = T, row.names = 1, check.names = F)
View(df)
qplot(x = 2005 ,data = df)
qplot(x = '2005' ,data = df)
?read.csv
qplot(y = '2005', data = df, geom = '')
qplot(y = '2005', data = df)
names(df)
df <- read.csv('indicator age of marriage.csv', row.names = 1, check.names = F)
names(df)
View(df)
qplot(y = '2005', data = df)
qplot(x = '2005', data = df)
data("diamonds")
data("diamonds")
str(diamonds)
qplot(x = '2005', data = df, bins = 30)
qplot(x = '2005', data = df, binwidth = 1)
qplot(x = '2005', data = df, binwidth = 1, geom = 'histogram')
library(readxl)
indicator_army_total <- read_excel("indicator army_total.xlsx",
sheet = "Data")
View(indicator_army_total)
qplot(x = '2008', data = indicator_army_total)
read.csv('birthdaysExample.csv', header = T, row.names = 1, check.names = F)
birthday <- read.csv('birthdaysExample.csv')
names(birthday)
qplot(x = dates, data = birthday)
qplot(x = dates, data = birthday, geom = 'freqpoly')
qplot(x = dates, data = birthday)
?strptime
?lubridate
library(lubridate)
install.packages("lubridate")
library(lubridate)
qplot(x = month(dates), data = birthday)
?strptime
?lubridate
z <- strptime("20/2/06 11:16:16.683", "%d/%m/%y %H:%M:%OS")
z
z <- strptime(birthday, "%d/%m/%y)
z <- strptime(birthday, "%d/%m/%y")
z <- strptime(birthday, "%d/%m/%y")
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidyr")
library(tidyr)
library(tidyr)
df <- read.csv('indicator age of marriage.csv', row.names = 1, check.names = F)
df <- gather(df)
View(df)
df <- read.csv('indicator age of marriage.csv', header = T, row.names = 1, check.names = F)
View(df)
df <- gather(df)
df <- read.csv('indicator age of marriage.csv', header = T, row.names = 1, check.names = F)
